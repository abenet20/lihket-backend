"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.repos_callback = repos_callback;
exports.repos_executor = repos_executor;
exports.repos_promise = repos_promise;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _promise = require("./promise");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function repos_callback(dir, _ref, callback) {
  var symlink_depth = _ref.symlink_depth,
      hidden_depth = _ref.hidden_depth;

  _fs["default"].readdir(dir, function (err, files) {
    if (err) return callback(err); // forward error

    var pending = files.length;
    if (!pending) return callback(null, []); // is empty

    if (files.includes('.git')) return callback(null, [dir]); // is repo

    var results = [];

    var _iterator = _createForOfIteratorHelper(files),
        _step;

    try {
      var _loop = function _loop() {
        var file = _step.value;
        var isHidden = file[0] === '.';

        if (hidden_depth <= 0 && isHidden) {
          if (! --pending) callback(null, results);
          return "continue"; // skip hidden
        }

        var filepath = _path["default"].join(dir, file);

        _fs["default"].lstat(filepath, function (err, stat) {
          if (err || symlink_depth <= 0 && stat.isSymbolicLink() || !stat.isSymbolicLink() && !stat.isDirectory()) {
            if (! --pending) callback(null, results); // skip
          } else {
            var options = {
              hidden_depth: isHidden ? hidden_depth - 1 : hidden_depth,
              symlink_depth: stat.isSymbolicLink() ? symlink_depth - 1 : symlink_depth
            };
            repos_callback(filepath, options, function (err, res) {
              if (err) {
                if (! --pending) callback(null, results); // skip
              } else {
                var _iterator2 = _createForOfIteratorHelper(res),
                    _step2;

                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    var v = _step2.value;
                    results.push(v);
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }

                if (! --pending) callback(null, results);
              }
            });
          }
        });
      };

      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _ret = _loop();

        if (_ret === "continue") continue;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  });
}

function repos_executor(dir, options) {
  return function (resolve, reject) {
    var callback = (0, _promise.promise_callback)(resolve, reject);
    repos_callback(dir, options, callback);
  };
}

function repos_promise(dir, options) {
  return new Promise(repos_executor(dir, options));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXBvcy5qcyJdLCJuYW1lcyI6WyJyZXBvc19jYWxsYmFjayIsImRpciIsImNhbGxiYWNrIiwic3ltbGlua19kZXB0aCIsImhpZGRlbl9kZXB0aCIsImZzIiwicmVhZGRpciIsImVyciIsImZpbGVzIiwicGVuZGluZyIsImxlbmd0aCIsImluY2x1ZGVzIiwicmVzdWx0cyIsImZpbGUiLCJpc0hpZGRlbiIsImZpbGVwYXRoIiwicGF0aCIsImpvaW4iLCJsc3RhdCIsInN0YXQiLCJpc1N5bWJvbGljTGluayIsImlzRGlyZWN0b3J5Iiwib3B0aW9ucyIsInJlcyIsInYiLCJwdXNoIiwicmVwb3NfZXhlY3V0b3IiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVwb3NfcHJvbWlzZSIsIlByb21pc2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7O0FBRU8sU0FBU0EsY0FBVCxDQUEwQkMsR0FBMUIsUUFBK0RDLFFBQS9ELEVBQTBFO0FBQUEsTUFBekNDLGFBQXlDLFFBQXpDQSxhQUF5QztBQUFBLE1BQTFCQyxZQUEwQixRQUExQkEsWUFBMEI7O0FBRTlFQyxpQkFBR0MsT0FBSCxDQUFXTCxHQUFYLEVBQWdCLFVBQVNNLEdBQVQsRUFBY0MsS0FBZCxFQUFxQjtBQUV0QyxRQUFJRCxHQUFKLEVBQVMsT0FBT0wsUUFBUSxDQUFFSyxHQUFGLENBQWYsQ0FGNkIsQ0FFSjs7QUFFbEMsUUFBSUUsT0FBTyxHQUFHRCxLQUFLLENBQUNFLE1BQXBCO0FBRUEsUUFBSSxDQUFDRCxPQUFMLEVBQWMsT0FBT1AsUUFBUSxDQUFFLElBQUYsRUFBUyxFQUFULENBQWYsQ0FOd0IsQ0FNUTs7QUFFOUMsUUFBSU0sS0FBSyxDQUFDRyxRQUFOLENBQWUsTUFBZixDQUFKLEVBQTRCLE9BQU9ULFFBQVEsQ0FBRSxJQUFGLEVBQVMsQ0FBRUQsR0FBRixDQUFULENBQWYsQ0FSVSxDQVEwQjs7QUFFaEUsUUFBTVcsT0FBTyxHQUFHLEVBQWhCOztBQVZzQywrQ0FZbEJKLEtBWmtCO0FBQUE7O0FBQUE7QUFBQTtBQUFBLFlBWTFCSyxJQVowQjtBQWNyQyxZQUFNQyxRQUFRLEdBQUdELElBQUksQ0FBQyxDQUFELENBQUosS0FBWSxHQUE3Qjs7QUFFQSxZQUFLVCxZQUFZLElBQUksQ0FBaEIsSUFBcUJVLFFBQTFCLEVBQXFDO0FBQ3BDLGNBQUksQ0FBQyxHQUFFTCxPQUFQLEVBQWdCUCxRQUFRLENBQUUsSUFBRixFQUFTVSxPQUFULENBQVI7QUFDaEIsNEJBRm9DLENBRXpCO0FBQ1g7O0FBRUQsWUFBTUcsUUFBUSxHQUFHQyxpQkFBS0MsSUFBTCxDQUFVaEIsR0FBVixFQUFlWSxJQUFmLENBQWpCOztBQUVBUix1QkFBR2EsS0FBSCxDQUFTSCxRQUFULEVBQW1CLFVBQVNSLEdBQVQsRUFBY1ksSUFBZCxFQUFvQjtBQUV0QyxjQUFLWixHQUFHLElBQUtKLGFBQWEsSUFBSSxDQUFqQixJQUFzQmdCLElBQUksQ0FBQ0MsY0FBTCxFQUE5QixJQUF5RCxDQUFDRCxJQUFJLENBQUNDLGNBQUwsRUFBRCxJQUEwQixDQUFDRCxJQUFJLENBQUNFLFdBQUwsRUFBekYsRUFBK0c7QUFDOUcsZ0JBQUksQ0FBQyxHQUFFWixPQUFQLEVBQWdCUCxRQUFRLENBQUUsSUFBRixFQUFTVSxPQUFULENBQVIsQ0FEOEYsQ0FDakU7QUFDN0MsV0FGRCxNQUlLO0FBRUosZ0JBQU1VLE9BQU8sR0FBRztBQUNmbEIsY0FBQUEsWUFBWSxFQUFFVSxRQUFRLEdBQUdWLFlBQVksR0FBRyxDQUFsQixHQUFzQkEsWUFEN0I7QUFFZkQsY0FBQUEsYUFBYSxFQUFFZ0IsSUFBSSxDQUFDQyxjQUFMLEtBQXdCakIsYUFBYSxHQUFHLENBQXhDLEdBQTRDQTtBQUY1QyxhQUFoQjtBQUtBSCxZQUFBQSxjQUFjLENBQUNlLFFBQUQsRUFBV08sT0FBWCxFQUFvQixVQUFTZixHQUFULEVBQWNnQixHQUFkLEVBQW1CO0FBRXBELGtCQUFJaEIsR0FBSixFQUFTO0FBRVIsb0JBQUksQ0FBQyxHQUFFRSxPQUFQLEVBQWdCUCxRQUFRLENBQUUsSUFBRixFQUFTVSxPQUFULENBQVIsQ0FGUixDQUVxQztBQUU3QyxlQUpELE1BTUs7QUFBQSw0REFFYVcsR0FGYjtBQUFBOztBQUFBO0FBRUo7QUFBQSx3QkFBWUMsQ0FBWjtBQUF1Qlosb0JBQUFBLE9BQU8sQ0FBQ2EsSUFBUixDQUFjRCxDQUFkO0FBQXZCO0FBRkk7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFJSixvQkFBSSxDQUFDLEdBQUVmLE9BQVAsRUFBZ0JQLFFBQVEsQ0FBQyxJQUFELEVBQU9VLE9BQVAsQ0FBUjtBQUVoQjtBQUVELGFBaEJhLENBQWQ7QUFrQkE7QUFFRCxTQWpDRDtBQXZCcUM7O0FBWXRDLDBEQUE0QjtBQUFBOztBQUFBLGlDQU0xQjtBQXdDRDtBQTFEcUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQTREdEMsR0E1REM7QUE4REY7O0FBRU0sU0FBU2MsY0FBVCxDQUEwQnpCLEdBQTFCLEVBQStCcUIsT0FBL0IsRUFBeUM7QUFFL0MsU0FBTyxVQUFXSyxPQUFYLEVBQXFCQyxNQUFyQixFQUE4QjtBQUVwQyxRQUFNMUIsUUFBUSxHQUFHLCtCQUFrQnlCLE9BQWxCLEVBQTRCQyxNQUE1QixDQUFqQjtBQUNBNUIsSUFBQUEsY0FBYyxDQUFFQyxHQUFGLEVBQVFxQixPQUFSLEVBQWlCcEIsUUFBakIsQ0FBZDtBQUVBLEdBTEQ7QUFPQTs7QUFFTSxTQUFTMkIsYUFBVCxDQUF5QjVCLEdBQXpCLEVBQThCcUIsT0FBOUIsRUFBd0M7QUFFOUMsU0FBTyxJQUFJUSxPQUFKLENBQWFKLGNBQWMsQ0FBQ3pCLEdBQUQsRUFBTXFCLE9BQU4sQ0FBM0IsQ0FBUDtBQUVBIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgZnMgZnJvbSAnZnMnIDtcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnIDtcbmltcG9ydCB7IHByb21pc2VfY2FsbGJhY2sgfSBmcm9tICcuL3Byb21pc2UnIDtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlcG9zX2NhbGxiYWNrICggZGlyICwge3N5bWxpbmtfZGVwdGgsIGhpZGRlbl9kZXB0aH0sIGNhbGxiYWNrICkge1xuXG5cdCAgZnMucmVhZGRpcihkaXIsIGZ1bmN0aW9uKGVyciwgZmlsZXMpIHtcblxuXHRcdGlmIChlcnIpIHJldHVybiBjYWxsYmFjayggZXJyICkgOyAvLyBmb3J3YXJkIGVycm9yXG5cblx0XHRsZXQgcGVuZGluZyA9IGZpbGVzLmxlbmd0aCA7XG5cblx0XHRpZiAoIXBlbmRpbmcpIHJldHVybiBjYWxsYmFjayggbnVsbCAsIFsgXSApIDsgLy8gaXMgZW1wdHlcblxuXHRcdGlmIChmaWxlcy5pbmNsdWRlcygnLmdpdCcpKSByZXR1cm4gY2FsbGJhY2soIG51bGwgLCBbIGRpciBdICkgOyAvLyBpcyByZXBvXG5cblx0XHRjb25zdCByZXN1bHRzID0gWyBdIDtcblxuXHRcdGZvciAoIGNvbnN0IGZpbGUgb2YgZmlsZXMgKSB7XG5cblx0XHRcdGNvbnN0IGlzSGlkZGVuID0gZmlsZVswXSA9PT0gJy4nO1xuXG5cdFx0XHRpZiAoIGhpZGRlbl9kZXB0aCA8PSAwICYmIGlzSGlkZGVuICkge1xuXHRcdFx0XHRpZiAoIS0tcGVuZGluZykgY2FsbGJhY2soIG51bGwgLCByZXN1bHRzICkgO1xuXHRcdFx0XHRjb250aW51ZSA7IC8vIHNraXAgaGlkZGVuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGZpbGVwYXRoID0gcGF0aC5qb2luKGRpciwgZmlsZSk7XG5cblx0XHRcdGZzLmxzdGF0KGZpbGVwYXRoLCBmdW5jdGlvbihlcnIsIHN0YXQpIHtcblxuXHRcdFx0XHRpZiAoIGVyciB8fCAoc3ltbGlua19kZXB0aCA8PSAwICYmIHN0YXQuaXNTeW1ib2xpY0xpbmsoKSkgfHwgKCFzdGF0LmlzU3ltYm9saWNMaW5rKCkgJiYgIXN0YXQuaXNEaXJlY3RvcnkoKSkgKSB7XG5cdFx0XHRcdFx0aWYgKCEtLXBlbmRpbmcpIGNhbGxiYWNrKCBudWxsICwgcmVzdWx0cyApIDsgLy8gc2tpcFxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zdCBvcHRpb25zID0ge1xuXHRcdFx0XHRcdFx0aGlkZGVuX2RlcHRoOiBpc0hpZGRlbiA/IGhpZGRlbl9kZXB0aCAtIDEgOiBoaWRkZW5fZGVwdGgsXG5cdFx0XHRcdFx0XHRzeW1saW5rX2RlcHRoOiBzdGF0LmlzU3ltYm9saWNMaW5rKCkgPyBzeW1saW5rX2RlcHRoIC0gMSA6IHN5bWxpbmtfZGVwdGhcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0cmVwb3NfY2FsbGJhY2soZmlsZXBhdGgsIG9wdGlvbnMsIGZ1bmN0aW9uKGVyciwgcmVzKSB7XG5cblx0XHRcdFx0XHRcdGlmIChlcnIpIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIS0tcGVuZGluZykgY2FsbGJhY2soIG51bGwgLCByZXN1bHRzICkgOyAvLyBza2lwXG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0ZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggY29uc3QgdiBvZiByZXMgKSByZXN1bHRzLnB1c2goIHYgKSA7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCEtLXBlbmRpbmcpIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0pO1xuXG5cdFx0fVxuXG5cdH0pO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBvc19leGVjdXRvciAoIGRpciwgb3B0aW9ucyApIHtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCByZXNvbHZlICwgcmVqZWN0ICkge1xuXG5cdFx0Y29uc3QgY2FsbGJhY2sgPSBwcm9taXNlX2NhbGxiYWNrKCByZXNvbHZlICwgcmVqZWN0ICkgO1xuXHRcdHJlcG9zX2NhbGxiYWNrKCBkaXIgLCBvcHRpb25zLCBjYWxsYmFjayApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwb3NfcHJvbWlzZSAoIGRpciwgb3B0aW9ucyApIHtcblxuXHRyZXR1cm4gbmV3IFByb21pc2UoIHJlcG9zX2V4ZWN1dG9yKGRpciwgb3B0aW9ucykgKSA7XG5cbn1cbiJdfQ==