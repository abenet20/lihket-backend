#!/usr/bin/env node
"use strict";

var _execa = _interopRequireDefault(require("execa"));

var _listr = _interopRequireDefault(require("listr"));

var _repos = require("./repos");

var _listrAggregateRenderer = _interopRequireDefault(require("@aureooms/listr-aggregate-renderer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var args = process.argv.slice(2);

if (args.length < 1) {
  console.error('usage: geez <git command> [<git command argument>, ...]');
  process.exit(2);
}

var result = _execa["default"].sync('git', ['help', '-a']);

var lines = result.stdout.split('\n');
lines = lines.filter(function (line) {
  return line.match(/^\s+[a-z]/);
});
lines = lines.map(function (line) {
  return line.trim().split(/\s+/)[0];
});
var available_commands = lines.sort();
var cmd = args[0];

if (!available_commands.includes(cmd)) {
  console.error("Unknown command '".concat(cmd, "'."));
  console.error("Available commands are: ".concat(available_commands.join(', '), "."));
  process.exit(2);
}

var cwd = process.env.GEEZ_CWD || '.';
var symlink_depth = Number.parseInt(process.env.GEEZ_SYMLINK_DEPTH, 10) || 0;
var hidden_depth = Number.parseInt(process.env.GEEZ_HIDDEN_DEPTH, 10) || 0;
var concurrent = Number.parseInt(process.env.GEEZ_CONCURRENT, 10) || 10; // true is too slow when there are a lot of repos

var repos_options = {
  symlink_depth: symlink_depth,
  hidden_depth: hidden_depth
};
var tasks = new _listr["default"]([{
  title: 'Searching for repos',
  task: function task(ctx) {
    return (0, _repos.repos_promise)(cwd, repos_options).then(function (repos) {
      ctx.repos = repos;
    });
  }
}, {
  title: "Applying 'git ".concat(args.join(' '), "' to all repos"),
  task: function task(ctx) {
    var pullingtasks = ctx.repos.map(function (repo) {
      return {
        title: repo,
        task: function task() {
          return (0, _execa["default"])('git', ['-C', repo].concat(args));
        }
      };
    });
    return new _listr["default"](pullingtasks, {
      concurrent: concurrent,
      exitOnError: false
    });
  }
}], {
  renderer: _listrAggregateRenderer["default"],
  collapse: false,
  aggregate: true,
  maxsubtasks: concurrent //showSubtasks: false

});
tasks.run().then(function () {
  process.exitCode = 0;
}, function () {
  process.exitCode = 1;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGkuanMiXSwibmFtZXMiOlsiYXJncyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJsZW5ndGgiLCJjb25zb2xlIiwiZXJyb3IiLCJleGl0IiwicmVzdWx0IiwiZXhlY2EiLCJzeW5jIiwibGluZXMiLCJzdGRvdXQiLCJzcGxpdCIsImZpbHRlciIsImxpbmUiLCJtYXRjaCIsIm1hcCIsInRyaW0iLCJhdmFpbGFibGVfY29tbWFuZHMiLCJzb3J0IiwiY21kIiwiaW5jbHVkZXMiLCJqb2luIiwiY3dkIiwiZW52IiwiR0VFWl9DV0QiLCJzeW1saW5rX2RlcHRoIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJHRUVaX1NZTUxJTktfREVQVEgiLCJoaWRkZW5fZGVwdGgiLCJHRUVaX0hJRERFTl9ERVBUSCIsImNvbmN1cnJlbnQiLCJHRUVaX0NPTkNVUlJFTlQiLCJyZXBvc19vcHRpb25zIiwidGFza3MiLCJMaXN0ciIsInRpdGxlIiwidGFzayIsImN0eCIsInRoZW4iLCJyZXBvcyIsInB1bGxpbmd0YXNrcyIsInJlcG8iLCJjb25jYXQiLCJleGl0T25FcnJvciIsInJlbmRlcmVyIiwiY29sbGFwc2UiLCJhZ2dyZWdhdGUiLCJtYXhzdWJ0YXNrcyIsInJ1biIsImV4aXRDb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQ0MsSUFBUixDQUFhQyxLQUFiLENBQW1CLENBQW5CLENBQWI7O0FBRUEsSUFBS0gsSUFBSSxDQUFDSSxNQUFMLEdBQWMsQ0FBbkIsRUFBdUI7QUFDdEJDLEVBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjLHlEQUFkO0FBQ0FMLEVBQUFBLE9BQU8sQ0FBQ00sSUFBUixDQUFhLENBQWI7QUFDQTs7QUFFRCxJQUFNQyxNQUFNLEdBQUdDLGtCQUFNQyxJQUFOLENBQVcsS0FBWCxFQUFrQixDQUFDLE1BQUQsRUFBUyxJQUFULENBQWxCLENBQWY7O0FBQ0EsSUFBSUMsS0FBSyxHQUFHSCxNQUFNLENBQUNJLE1BQVAsQ0FBY0MsS0FBZCxDQUFvQixJQUFwQixDQUFaO0FBQ0FGLEtBQUssR0FBR0EsS0FBSyxDQUFDRyxNQUFOLENBQWMsVUFBQUMsSUFBSTtBQUFBLFNBQUlBLElBQUksQ0FBQ0MsS0FBTCxDQUFXLFdBQVgsQ0FBSjtBQUFBLENBQWxCLENBQVI7QUFDQUwsS0FBSyxHQUFHQSxLQUFLLENBQUNNLEdBQU4sQ0FBVyxVQUFBRixJQUFJO0FBQUEsU0FBSUEsSUFBSSxDQUFDRyxJQUFMLEdBQVlMLEtBQVosQ0FBa0IsS0FBbEIsRUFBeUIsQ0FBekIsQ0FBSjtBQUFBLENBQWYsQ0FBUjtBQUNBLElBQU1NLGtCQUFrQixHQUFHUixLQUFLLENBQUNTLElBQU4sRUFBM0I7QUFFQSxJQUFNQyxHQUFHLEdBQUdyQixJQUFJLENBQUMsQ0FBRCxDQUFoQjs7QUFFQSxJQUFLLENBQUVtQixrQkFBa0IsQ0FBQ0csUUFBbkIsQ0FBNEJELEdBQTVCLENBQVAsRUFBMEM7QUFDekNoQixFQUFBQSxPQUFPLENBQUNDLEtBQVIsNEJBQWtDZSxHQUFsQztBQUNBaEIsRUFBQUEsT0FBTyxDQUFDQyxLQUFSLG1DQUF5Q2Esa0JBQWtCLENBQUNJLElBQW5CLENBQXdCLElBQXhCLENBQXpDO0FBQ0F0QixFQUFBQSxPQUFPLENBQUNNLElBQVIsQ0FBYSxDQUFiO0FBQ0E7O0FBRUQsSUFBTWlCLEdBQUcsR0FBR3ZCLE9BQU8sQ0FBQ3dCLEdBQVIsQ0FBWUMsUUFBWixJQUF3QixHQUFwQztBQUNBLElBQU1DLGFBQWEsR0FBR0MsTUFBTSxDQUFDQyxRQUFQLENBQWdCNUIsT0FBTyxDQUFDd0IsR0FBUixDQUFZSyxrQkFBNUIsRUFBZ0QsRUFBaEQsS0FBdUQsQ0FBN0U7QUFDQSxJQUFNQyxZQUFZLEdBQUdILE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQjVCLE9BQU8sQ0FBQ3dCLEdBQVIsQ0FBWU8saUJBQTVCLEVBQStDLEVBQS9DLEtBQXNELENBQTNFO0FBQ0EsSUFBTUMsVUFBVSxHQUFHTCxNQUFNLENBQUNDLFFBQVAsQ0FBZ0I1QixPQUFPLENBQUN3QixHQUFSLENBQVlTLGVBQTVCLEVBQTZDLEVBQTdDLEtBQW9ELEVBQXZFLEMsQ0FBMkU7O0FBRTNFLElBQU1DLGFBQWEsR0FBRztBQUNyQlIsRUFBQUEsYUFBYSxFQUFiQSxhQURxQjtBQUVyQkksRUFBQUEsWUFBWSxFQUFaQTtBQUZxQixDQUF0QjtBQUtBLElBQU1LLEtBQUssR0FBRyxJQUFJQyxpQkFBSixDQUFVLENBQ3ZCO0FBQ0NDLEVBQUFBLEtBQUssRUFBRSxxQkFEUjtBQUVDQyxFQUFBQSxJQUFJLEVBQUUsY0FBQUMsR0FBRztBQUFBLFdBQUksMEJBQWNoQixHQUFkLEVBQW1CVyxhQUFuQixFQUFrQ00sSUFBbEMsQ0FBd0MsVUFBQUMsS0FBSyxFQUFJO0FBQUVGLE1BQUFBLEdBQUcsQ0FBQ0UsS0FBSixHQUFZQSxLQUFaO0FBQXFCLEtBQXhFLENBQUo7QUFBQTtBQUZWLENBRHVCLEVBS3ZCO0FBQ0NKLEVBQUFBLEtBQUssMEJBQW1CdEMsSUFBSSxDQUFDdUIsSUFBTCxDQUFVLEdBQVYsQ0FBbkIsbUJBRE47QUFFQ2dCLEVBQUFBLElBQUksRUFBRSxjQUFBQyxHQUFHLEVBQUk7QUFFWixRQUFNRyxZQUFZLEdBQUdILEdBQUcsQ0FBQ0UsS0FBSixDQUFVekIsR0FBVixDQUFjLFVBQUEyQixJQUFJO0FBQUEsYUFBSztBQUMzQ04sUUFBQUEsS0FBSyxFQUFFTSxJQURvQztBQUUzQ0wsUUFBQUEsSUFBSSxFQUFFO0FBQUEsaUJBQU0sdUJBQU0sS0FBTixFQUFhLENBQUMsSUFBRCxFQUFPSyxJQUFQLEVBQWFDLE1BQWIsQ0FBb0I3QyxJQUFwQixDQUFiLENBQU47QUFBQTtBQUZxQyxPQUFMO0FBQUEsS0FBbEIsQ0FBckI7QUFLQSxXQUFPLElBQUlxQyxpQkFBSixDQUFVTSxZQUFWLEVBQXdCO0FBQzlCVixNQUFBQSxVQUFVLEVBQVZBLFVBRDhCO0FBRTlCYSxNQUFBQSxXQUFXLEVBQUU7QUFGaUIsS0FBeEIsQ0FBUDtBQUtBO0FBZEYsQ0FMdUIsQ0FBVixFQXFCWDtBQUNGQyxFQUFBQSxRQUFRLEVBQVJBLGtDQURFO0FBRUZDLEVBQUFBLFFBQVEsRUFBRSxLQUZSO0FBR0ZDLEVBQUFBLFNBQVMsRUFBRSxJQUhUO0FBSUZDLEVBQUFBLFdBQVcsRUFBRWpCLFVBSlgsQ0FLRjs7QUFMRSxDQXJCVyxDQUFkO0FBNkJBRyxLQUFLLENBQUNlLEdBQU4sR0FBWVYsSUFBWixDQUNDLFlBQU07QUFDTHhDLEVBQUFBLE9BQU8sQ0FBQ21ELFFBQVIsR0FBbUIsQ0FBbkI7QUFDQSxDQUhGLEVBSUMsWUFBTTtBQUNMbkQsRUFBQUEsT0FBTyxDQUFDbUQsUUFBUixHQUFtQixDQUFuQjtBQUNBLENBTkYiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5cbmltcG9ydCBleGVjYSBmcm9tICdleGVjYScgO1xuaW1wb3J0IExpc3RyIGZyb20gJ2xpc3RyJyA7XG5pbXBvcnQgeyByZXBvc19wcm9taXNlIH0gZnJvbSAgJy4vcmVwb3MnIDtcbmltcG9ydCByZW5kZXJlciBmcm9tICdAYXVyZW9vbXMvbGlzdHItYWdncmVnYXRlLXJlbmRlcmVyJyA7XG5cbmNvbnN0IGFyZ3MgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5cbmlmICggYXJncy5sZW5ndGggPCAxICkge1xuXHRjb25zb2xlLmVycm9yKCd1c2FnZTogZ2VleiA8Z2l0IGNvbW1hbmQ+IFs8Z2l0IGNvbW1hbmQgYXJndW1lbnQ+LCAuLi5dJyk7XG5cdHByb2Nlc3MuZXhpdCgyKTtcbn1cblxuY29uc3QgcmVzdWx0ID0gZXhlY2Euc3luYygnZ2l0JywgWydoZWxwJywgJy1hJ10pO1xubGV0IGxpbmVzID0gcmVzdWx0LnN0ZG91dC5zcGxpdCgnXFxuJyk7XG5saW5lcyA9IGxpbmVzLmZpbHRlciggbGluZSA9PiBsaW5lLm1hdGNoKC9eXFxzK1thLXpdLykgKTtcbmxpbmVzID0gbGluZXMubWFwKCBsaW5lID0+IGxpbmUudHJpbSgpLnNwbGl0KC9cXHMrLylbMF0gKTtcbmNvbnN0IGF2YWlsYWJsZV9jb21tYW5kcyA9IGxpbmVzLnNvcnQoKTtcblxuY29uc3QgY21kID0gYXJnc1swXSA7XG5cbmlmICggISBhdmFpbGFibGVfY29tbWFuZHMuaW5jbHVkZXMoY21kKSApIHtcblx0Y29uc29sZS5lcnJvcihgVW5rbm93biBjb21tYW5kICcke2NtZH0nLmApO1xuXHRjb25zb2xlLmVycm9yKGBBdmFpbGFibGUgY29tbWFuZHMgYXJlOiAke2F2YWlsYWJsZV9jb21tYW5kcy5qb2luKCcsICcpfS5gKTtcblx0cHJvY2Vzcy5leGl0KDIpO1xufVxuXG5jb25zdCBjd2QgPSBwcm9jZXNzLmVudi5HRUVaX0NXRCB8fCAnLicgO1xuY29uc3Qgc3ltbGlua19kZXB0aCA9IE51bWJlci5wYXJzZUludChwcm9jZXNzLmVudi5HRUVaX1NZTUxJTktfREVQVEgsIDEwKSB8fCAwO1xuY29uc3QgaGlkZGVuX2RlcHRoID0gTnVtYmVyLnBhcnNlSW50KHByb2Nlc3MuZW52LkdFRVpfSElEREVOX0RFUFRILCAxMCkgfHwgMDtcbmNvbnN0IGNvbmN1cnJlbnQgPSBOdW1iZXIucGFyc2VJbnQocHJvY2Vzcy5lbnYuR0VFWl9DT05DVVJSRU5ULCAxMCkgfHwgMTA7IC8vIHRydWUgaXMgdG9vIHNsb3cgd2hlbiB0aGVyZSBhcmUgYSBsb3Qgb2YgcmVwb3NcblxuY29uc3QgcmVwb3Nfb3B0aW9ucyA9IHtcblx0c3ltbGlua19kZXB0aCxcblx0aGlkZGVuX2RlcHRoXG59O1xuXG5jb25zdCB0YXNrcyA9IG5ldyBMaXN0cihbXG5cdHtcblx0XHR0aXRsZTogJ1NlYXJjaGluZyBmb3IgcmVwb3MnLFxuXHRcdHRhc2s6IGN0eCA9PiByZXBvc19wcm9taXNlKGN3ZCwgcmVwb3Nfb3B0aW9ucykudGhlbiggcmVwb3MgPT4geyBjdHgucmVwb3MgPSByZXBvcyA7IH0gKVxuXHR9LFxuXHR7XG5cdFx0dGl0bGU6IGBBcHBseWluZyAnZ2l0ICR7YXJncy5qb2luKCcgJyl9JyB0byBhbGwgcmVwb3NgLFxuXHRcdHRhc2s6IGN0eCA9PiB7XG5cblx0XHRcdGNvbnN0IHB1bGxpbmd0YXNrcyA9IGN0eC5yZXBvcy5tYXAocmVwbyA9PiAoe1xuXHRcdFx0XHR0aXRsZTogcmVwbyxcblx0XHRcdFx0dGFzazogKCkgPT4gZXhlY2EoJ2dpdCcsIFsnLUMnLCByZXBvXS5jb25jYXQoYXJncykpXG5cdFx0XHR9KSk7XG5cblx0XHRcdHJldHVybiBuZXcgTGlzdHIocHVsbGluZ3Rhc2tzLCB7XG5cdFx0XHRcdGNvbmN1cnJlbnQsXG5cdFx0XHRcdGV4aXRPbkVycm9yOiBmYWxzZVxuXHRcdFx0fSk7XG5cblx0XHR9XG5cdH1cbl0sIHtcblx0cmVuZGVyZXIsXG5cdGNvbGxhcHNlOiBmYWxzZSxcblx0YWdncmVnYXRlOiB0cnVlLFxuXHRtYXhzdWJ0YXNrczogY29uY3VycmVudCxcblx0Ly9zaG93U3VidGFza3M6IGZhbHNlXG59KTtcblxudGFza3MucnVuKCkudGhlbihcblx0KCkgPT4ge1xuXHRcdHByb2Nlc3MuZXhpdENvZGUgPSAwO1xuXHR9LFxuXHQoKSA9PiB7XG5cdFx0cHJvY2Vzcy5leGl0Q29kZSA9IDE7XG5cdH0sXG4pO1xuIl19